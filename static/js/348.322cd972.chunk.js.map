{"version":3,"file":"static/js/348.322cd972.chunk.js","mappings":"+NAIMA,EAAa,SAAAC,GACjB,IAAAC,EAA+FD,EAAvFE,KAAAA,OAAI,IAAAD,EAAG,GAAEA,EAAEE,EAA4EH,EAA5EG,QAAOC,EAAqEJ,EAAnEK,WAAAA,OAAU,IAAAD,GAAQA,EAAAE,EAAiDN,EAA/CO,KAAAA,OAAI,IAAAD,EAAG,UAASA,EAAAE,EAA+BR,EAA7BS,QAAAA,OAAO,IAAAD,GAAQA,EAAKE,GAAIC,EAAAA,EAAAA,GAAKX,EAAKY,GAEpG,OACEC,EAAAA,EAAAA,KAACC,EAAAA,IAAMC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CAACR,KAAMA,EAAME,QAASA,EAASN,QAASA,EAASa,SAAUX,GAAgBK,GAAI,IAAAO,SACnFf,IAGP,EAEA,KAAegB,EAAAA,EAAAA,MAAKnB,E,gSCVdoB,EAAY,SAAAnB,GAChB,IACEoB,EAaEpB,EAbFoB,YACAC,EAYErB,EAZFqB,MACAC,EAWEtB,EAXFsB,QAAOC,EAWLvB,EAVFwB,WAAAA,OAAU,IAAAD,GAAOA,EACjBE,EASEzB,EATFyB,KACAC,EAQE1B,EARF0B,MACAC,EAOE3B,EAPF2B,OACAC,EAME5B,EANF4B,MAAKC,EAMH7B,EALFgB,SAAAA,OAAQ,IAAAa,GAAQA,EAChBC,EAIE9B,EAJF8B,KAAIC,EAIF/B,EAHFgC,UAAAA,OAAS,IAAAD,EAAG,OAAMA,EAClBE,EAEEjC,EAFFiC,OACGvB,GAAIC,EAAAA,EAAAA,GACLX,EAAKY,GAET,OACEC,EAAAA,EAAAA,KAACqB,EAAAA,EAAAA,MAASnB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,CACRU,KAAMA,EACNJ,MAAOA,EACPc,MAAO,EAAApB,EAAAA,EAAAA,GAAA,CAEHqB,SAAUZ,EACVF,QAASA,GACNQ,IAGPO,eAAgBX,EAAQ,QAAU,GAClCY,KAAMZ,GACFhB,GAAI,IAAAO,UAERJ,EAAAA,EAAAA,KAAC0B,EAAAA,EAAK,CACJvB,SAAUA,EACV,cAAaS,EACbG,MAAY,OAALA,QAAK,IAALA,EAAAA,EAAS,GAChBH,KAAMA,EACNL,YAAaA,EACbO,OAAQA,EACRpB,KAAMyB,EACNC,OAAQA,EACRO,MAAO,CAAEC,OAAQ,YAIzB,EAEA,GAAevB,EAAAA,EAAAA,MAAKC,GC9CZuB,EAAaH,EAAAA,EAAAA,SAEfI,EAAW,SAAA3C,GACf,IAAA4C,EAAeV,EAAAA,EAAAA,UAARW,GAAsBC,EAAAA,EAAAA,GAAAF,EAAA,GAAlB,GACXG,GAAgCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAH,EAAAA,EAAAA,GAAAC,EAAA,GAAvC/B,EAAQiC,EAAA,GAAEC,EAAWD,EAAA,GACpBE,EAAsCnD,EAAtCmD,SAAQC,EAA8BpD,EAA5BqD,aAAAA,OAAY,IAAAD,EAAG,WAAO,EAACA,GAEzCE,EAAAA,EAAAA,YAAU,WACJH,GACFN,EAAKU,eAAeJ,EAExB,GAAG,CAACA,IAEJ,IAAMK,GAAiBC,EAAAA,EAAAA,cAAY,WACjCP,GAAY,EACd,GAAG,IAEGQ,GAAWD,EAAAA,EAAAA,cAAY,WAC3BZ,EACGc,iBACAC,MAAK,SAAAC,GACJ,IAAIC,GAAI/C,EAAAA,EAAAA,GAAA,GACH8C,GAELR,EAAaS,EACf,IACCC,OAAM,SAAArC,GACUA,EAAMsC,YAAYC,QAAO,SAAAC,GACtC,OAAOA,EAAMC,OAAOC,MACtB,IACWA,MACb,GACJ,GAAG,IAEH,OACEC,EAAAA,EAAAA,MAACnC,EAAAA,EAAI,CAACW,KAAMA,EAAMpB,KAAK,OAAO6C,OAAO,WAAWZ,SAAUA,EAAUF,eAAgBA,EAAevC,SAAA,EACjGoD,EAAAA,EAAAA,MAACE,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKC,MAAM,EAAKxD,SAAA,EAChCJ,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CAACC,KAAM,GAAG1D,UACZJ,EAAAA,EAAAA,KAACM,EAAS,CAACC,YAAY,QAAQK,KAAK,QAAQJ,MAAM,QAAQC,QAAQ,yBAEpET,EAAAA,EAAAA,KAAC6D,EAAAA,EAAG,CAACC,KAAM,GAAG1D,UACZJ,EAAAA,EAAAA,KAACqB,EAAAA,EAAAA,KAAS,CACRT,KAAK,OACLJ,MAAM,eACNc,MAAO,CACL,CACEC,UAAU,EACVd,QAAS,6BAEXL,UAEFJ,EAAAA,EAAAA,KAAC6B,EAAQ,CAACkC,KAAM,YAItB/D,EAAAA,EAAAA,KAAC0D,EAAAA,EAAG,CAACC,OAAQ,CAAC,GAAI,IAAKK,MAAO,MAAM5D,UAClCJ,EAAAA,EAAAA,KAACd,EAAAA,EAAU,CAACQ,KAAK,UAAUuE,SAAS,SAAS5E,KAAK,SAASG,WAAYW,QAI/E,EAEA,GAAeE,EAAAA,EAAAA,MAAKyB,E","sources":["components/button/index.jsx","components/input/index.jsx","pages/posts/components/form.jsx"],"sourcesContent":["import { Button } from 'antd';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst BaseButton = props => {\n  const { text = '', onClick, isDisabled = false, type = 'primary', loading = false, ...rest } = props;\n\n  return (\n    <Button type={type} loading={loading} onClick={onClick} disabled={isDisabled} {...rest}>\n      {text}\n    </Button>\n  );\n};\n\nexport default memo(BaseButton);\n\nBaseButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n  isDisabled: PropTypes.bool,\n  type: PropTypes.string,\n  loading: PropTypes.bool,\n};\n","import { Input, Form } from 'antd';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nconst BaseInput = props => {\n  const {\n    placeholder,\n    label,\n    message,\n    isRequired = true,\n    name,\n    error,\n    prefix,\n    value,\n    disabled = false,\n    rule,\n    inputType = 'text',\n    suffix,\n    ...rest\n  } = props;\n\n  return (\n    <Form.Item\n      name={name}\n      label={label}\n      rules={[\n        {\n          required: isRequired,\n          message: message,\n          ...rule,\n        },\n      ]}\n      validateStatus={error ? 'error' : ''}\n      help={error}\n      {...rest}\n    >\n      <Input\n        disabled={disabled}\n        data-testid={name}\n        value={value ?? ''}\n        name={name}\n        placeholder={placeholder}\n        prefix={prefix}\n        type={inputType}\n        suffix={suffix}\n        style={{ height: '40px' }}\n      />\n    </Form.Item>\n  );\n};\n\nexport default memo(BaseInput);\n\nBaseInput.propTypes = {\n  placeholder: PropTypes.string.isRequired,\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  isRequired: PropTypes.bool,\n  message: PropTypes.string,\n  name: PropTypes.string,\n  error: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),\n  prefix: PropTypes.node,\n  value: PropTypes.string,\n  disabled: PropTypes.bool,\n  rule: PropTypes.object,\n  inputType: PropTypes.string,\n  suffix: PropTypes.node,\n};\n","import { useEffect, memo, useCallback, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Form, Col, Row, Input } from 'antd';\nimport BaseButton from 'components/button';\nimport BaseInput from 'components/input';\nconst { TextArea } = Input;\n\nconst PostForm = props => {\n  const [form] = Form.useForm();\n  const [disabled, setDisabled] = useState(true);\n  const { postItem, handleSubmit = () => {} } = props;\n\n  useEffect(() => {\n    if (postItem) {\n      form.setFieldsValue(postItem);\n    }\n  }, [postItem]);\n\n  const onFieldsChange = useCallback(() => {\n    setDisabled(false);\n  }, []);\n\n  const onFinish = useCallback(() => {\n    form\n      .validateFields()\n      .then(values => {\n        let item = {\n          ...values,\n        };\n        handleSubmit(item);\n      })\n      .catch(error => {\n        const errors = error.errorFields.filter(field => {\n          return field.errors.length;\n        });\n        if (errors.length) return;\n      });\n  }, []);\n\n  return (\n    <Form form={form} name=\"form\" layout=\"vertical\" onFinish={onFinish} onFieldsChange={onFieldsChange}>\n      <Row gutter={[10, 10]} wrap={true}>\n        <Col span={12}>\n          <BaseInput placeholder=\"title\" name=\"title\" label=\"Title\" message=\"Title is required\" />\n        </Col>\n        <Col span={12}>\n          <Form.Item\n            name=\"body\"\n            label=\"Descriptions\"\n            rules={[\n              {\n                required: true,\n                message: 'Descriptions is required',\n              },\n            ]}\n          >\n            <TextArea rows={4} />\n          </Form.Item>\n        </Col>\n      </Row>\n      <Row gutter={[10, 10]} align={'end'}>\n        <BaseButton type=\"primary\" htmlType=\"submit\" text=\"Submit\" isDisabled={disabled} />\n      </Row>\n    </Form>\n  );\n};\n\nexport default memo(PostForm);\n\nPostForm.propTypes = {\n  handleSubmit: PropTypes.func,\n  postItem: PropTypes.object,\n};\n"],"names":["BaseButton","props","_props$text","text","onClick","_props$isDisabled","isDisabled","_props$type","type","_props$loading","loading","rest","_objectWithoutProperties","_excluded","_jsx","Button","_objectSpread","disabled","children","memo","BaseInput","placeholder","label","message","_props$isRequired","isRequired","name","error","prefix","value","_props$disabled","rule","_props$inputType","inputType","suffix","Form","rules","required","validateStatus","help","Input","style","height","TextArea","PostForm","_Form$useForm","form","_slicedToArray","_useState","useState","_useState2","setDisabled","postItem","_props$handleSubmit","handleSubmit","useEffect","setFieldsValue","onFieldsChange","useCallback","onFinish","validateFields","then","values","item","catch","errorFields","filter","field","errors","length","_jsxs","layout","Row","gutter","wrap","Col","span","rows","align","htmlType"],"sourceRoot":""}